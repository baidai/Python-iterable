#Numpy array vs list
	#both are iterable
	#can use indexing to access elements num_list[1]
	#can be modified the same num_list[3] = 40
import numpy as np
#numpy arrays	
np.array([1,2,3,4]) 
#designed for high efficiency computations
#only store data of same type array.dtype
	# normal array can store data of different types
# can specify datatype when created:
# np.array([1,2,3,4], dtype= np.dype('int64'))
	#dtype = np.dtype('O') #object
	#dtype = np.dtype('str') #string

# example list
list2d = [[1,2,3,4], [6,7,8,9,]]
print(list2d[1][2]) #returns 8
print([list2d[j][1:3] for j in range(0,2)])

import numpy as np
array2d = np.array([[1,2,3,4], [6,7,8,9,]])
print(array2d[1, 2])
print(array2d[0:2, 1:3])

#Operations
#list
#can + list together, but cannot subtract, multiply or divide
num_list1 = [1,2,3]
num_list2 = [10, 20, 30]
print(num_list1 + num_list2) #concatenated


num_list1 = np.array([1,2,3])
num_list2 = np.array([10, 20, 30])
print(num_list1 + num_list2) #added together
print(num_list1 - num_list2)
print(num_list1 * num_list2)
print(num_list1 / num_list2)

# return boolan > < >= <= == !=
print(num_list1 < 0)

# can filter arrays
print(num_list1[num_list1 > 1])

#broadcasting - np.array
print(num_list2 * 3)

#a list will be extended
list = [1,2,3]
print(list * 3)

#multidimensional arrays
# multipy by row
np.array([1,2,3])

# multiply by column
np.array([[1],[2],[3]])


#Practice, make calculate np.array and array to get same values
input_list1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
output_array1 = 5 * np.array(input_list1)
#print(list(map(lambda x: [5*i for i in x], input_list1))
print(output_array1)


input_list2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
output_array2 = [x for x in np.array(input_list2) if x %2 == 0]
#print(list(filter(lambda x: x % 2 == 0, input_list2)))
print(output_array2)


input_list3 = [[1, 2], [3, 4], [5, 6]]
output_array3 = np.array(input_list3)**2
#print([[i*i for i in j] for j in input_list3])
print(output_array3)